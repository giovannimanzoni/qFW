<?xml version="1.0" encoding="UTF-8"?>

<project name="qFW" default="build"  basedir=".">

    <!-- Add the PhpDocumentor path to the include path because the PhpDocumentor package doesn't do it and Phing requires it -->
    <includepath classpath="./vendor/phpdocumentor" />

    <target name="pre-push"
            depends="build:clean,build:phpunit,build:behat,build:phpcs"
            description="performs pre-push actions by validating the code"/>

    <target name="build"
            depends="build:clean,build:phpunit,build:sami,build:phpcs,build:phpcsExamples,build:phploc,build:phpmd,build:phpcpd,build:pdepend"
            description="Builds phpDocumentor and generates all artefacts needed for Jenkins"/>

    <target name="build:clean" description="Deletes and recreates the 'build' folder for Jenkins">
        <!-- Clean up -->
        <delete dir="${project.basedir}/build"/>

        <!-- Create build directories -->
        <mkdir dir="${project.basedir}/build/api"/>
        <mkdir dir="${project.basedir}/build/code-browser"/>
        <mkdir dir="${project.basedir}/build/coverage"/>
        <mkdir dir="${project.basedir}/build/logs"/>
        <mkdir dir="${project.basedir}/build/pdepend"/>
    </target>

    <!-- Generate phpunit results and code coverage -->
    <target name="build:phpunit" description="Unit test phpDocumentor" >
        <exec executable="${project.basedir}/vendor/bin/phpunit"  checkreturn="true" passthru="true">
        </exec>
    </target>


    <!-- Generate API documentation with phpDocumentor -->
    <!-- analizza anche la cartella vendor.. bah.. cercare perchÃ¨...-->
    <target name="build:sami" description="Generates API documentation" >
        <exec executable="php"  >
            <arg line=" sami.phar update sami-config.php --force"/>
        </exec>
    </target>


    <!-- Generate checkstyle.xml -->
    <target name="build:phpcs" description="Checks for Coding Standard violations">
        <echo message="Executing phpCodeSniffer, output is in 'build/logs/CodingStandardViolations.xml'"/>
        <exec command="${project.basedir}/vendor/bin/phpcs -p --standard=PSR1,PSR2,PHPCompatibility --encoding=utf-8
                        --runtime-set testVersion 7.2- ${project.basedir}/src/ --report-width=120
                        --report-checkstyle=${project.basedir}/build/logs/CodingStandardViolations.xml
                        --report-source=${project.basedir}/build/logs/CodingStandardViolationsSource.txt
                        --report-info=${project.basedir}/build/logs/CodingStandardViolationsInfo.txt
                        --ignore=${project.basedir}/src/mvc/model/fpdf/*
                        --extensions=php
                       " passthru="true" checkreturn="false"/>
    </target>


    <!-- Generate checkstyle.xml for examples folder -->
    <target name="build:phpcsExamples" description="Checks for Coding Standard violations for examples folder">
        <echo message="Executing phpCodeSniffer, output is in 'build/logs/CodingStandardViolations.xml'"/>
        <exec command="${project.basedir}/vendor/bin/phpcs -p --standard=PSR1,PSR2,PHPCompatibility --encoding=utf-8
                        --runtime-set testVersion 7.2- ${project.basedir}/examples/src/ --report-width=120
                        --report-checkstyle=${project.basedir}/build/logs/CodingStandardViolationsExamples.xml
                        --report-source=${project.basedir}/build/logs/CodingStandardViolationsSourceExamples.txt
                        --report-info=${project.basedir}/build/logs/CodingStandardViolationsInfoExamples.txt
                        --ignore=${project.basedir}/examples/src/vendor/*
                        --extensions=php
                       " passthru="true" checkreturn="false"/>
    </target>



    <!-- Generate phploc.csv -->

    <target name="build:phploc" description="Generates LOC statistics">
        <exec executable="${project.basedir}/vendor/bin/phploc" passthru="true">
            <arg line="--log-csv ${project.basedir}/build/logs/phploc.csv --exclude=${project.basedir}/src/mvc/model/fpdf" />
            <arg path="${project.basedir}/src" />
        </exec>
    </target>

    <!-- Generate pmd-cpd.xml -->
    <target name="build:phpcpd" description="Search for duplicated code">
        <exec executable="${project.basedir}/vendor/bin/phpcpd" passthru="true">
            <arg value="--log-pmd=${project.basedir}/build/logs/pmd-cpd.xml "/>
            <arg value="--exclude=${project.basedir}/src/mvc/model/fpdf"  />
            <arg path="${project.basedir}/src"/>
        </exec>
    </target>




    <!-- Generate pmd.xml -->
    <target name="build:phpmd" description="Analyze the source code for suboptimal solutions">
        <phpmd rulesets="codesize,design,naming,unusedcode">
            <fileset dir="${project.basedir}/src/">
                <include name="*.php" />
            </fileset>
            <formatter type="html" outfile="${project.basedir}/build/logs/pmd_mvc.html"/>
        </phpmd>
    </target>

    <!-- Generate jdepend.xml and software metrics charts -->
    <target name="build:pdepend" description="Generate software metric information and charts">
        <exec executable="${project.basedir}/vendor/bin/pdepend" passthru="true">
            <arg value="--jdepend-xml=${project.basedir}/build/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${project.basedir}/build/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${project.basedir}/build/pdepend/overview-pyramid.svg" />
            <arg value="--ignore=${project.basedir}/src/mvc/model/fpdf/"/>
            <arg path="${project.basedir}/src/"/>
        </exec>
    </target>

    <!-- Generate behat results -->
    <target name="build:behat" description="Run BDD tests for phpDocumentor">
        <exec executable="${project.basedir}/vendor/bin/php" dir="${project.basedir}/" checkreturn="true" passthru="true">
            <arg line="bin/behat -f progress" />
        </exec>
    </target>

</project>